library(installr)
updateR()
library(installr)
updateR()
library(rmarkdown)
install.packages("rmarkdown")
############
library(rticles)
install.packages("rticles")
library(rmarkdown)
install.packages("xfun")
library(rmarkdown)
install.packages("openxlsx")
install.packages("tidyverse")
install.packages("gridExtra")
install.packages("nortest")
install.packages("genetics")
install.packages("qpdf")
library(rmarkdown)
############
library(rticles)
library(pubmedR)
query <- "'music perception'[Title/Abstract]
AND Journal Article[PT]"
D <- pmApiRequest(query = query, limit = 2000, api_key = NULL)
df4 <- pmApi2df(D)
nomes7<-colnames(df4)
nomes7
head(df4)
nomes7
library(pubmedR)
library(pubmedR)
query <- "('COVID 19' OR 'SARS CoV' OR 'SARS CoV 2' OR 'COVID')[ALL] AND Journal Article[PT] AND 2020:2021[DP]"
res <- pmQueryTotalCount(query = query, api_key = NULL)
res$total_count
query <- "('COVID')[ALL] AND Journal Article[PT] AND 2020:2021[DP]"
res <- pmQueryTotalCount(query = query, api_key = NULL)
res$total_count
query <- "('COVID 19')[ALL] AND 2020:2021[DP]"
res <- pmQueryTotalCount(query = query, api_key = NULL)
res$total_count
query <- "(('COVID 19')[ALL] AND 2020:2021[DP])"
res <- pmQueryTotalCount(query = query, api_key = NULL)
res$total_count
query <- "(('COVID-19')[ALL] AND 2020:2021[DP])"
res <- pmQueryTotalCount(query = query, api_key = NULL)
res$total_count
query <- "COVID*[ALL] AND 2020:2021[DP])"
res <- pmQueryTotalCount(query = query, api_key = NULL)
res$total_count
D <- pmApiRequest(query = query, limit = 170460, api_key = NULL)
D <- pmApiRequest(query = query, limit = 170460, api_key = NULL)
library(bibliometrix)
biblioshiny()
biblioshiny()
biblioshiny()
library(bibliometrix)
library(bibliometrix)
shp <- readOGR("mapa\\.", "BR_UF_2021", stringsAsFactors=FALSE, encoding="UTF-8")
install.packages("rgdal")
library(rgdal)
shp <- readOGR("mapa\\.", "BR_UF_2021", stringsAsFactors=FALSE, encoding="UTF-8")
install.packages("gggenes")
###################
library(ggplot2)
library(gggenes)
ggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +
geom_gene_arrow() +
facet_wrap(~ molecule, scales = "free", ncol = 1) +
scale_fill_brewer(palette = "Set3")
example_genes
data<-example_genes
ggplot(data, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +
geom_gene_arrow() +
facet_wrap(~ molecule, scales = "free", ncol = 1) +
scale_fill_brewer(palette = "Set3")
ggplot(example_subgenes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +
geom_gene_arrow() +
facet_wrap(~ molecule, scales = "free", ncol = 1) +
scale_fill_brewer(palette = "Set3")
ggplot2::ggplot(example_genes, ggplot2::aes(xmin = start, xmax = end,
y = molecule, fill = gene)) +
geom_gene_arrow() +
ggplot2::facet_wrap(~ molecule, scales = "free")
citation()
install.packages("installr")
setwd("C:/Users/Ricardo/Documents/pdftools")
library(pdftools)
pdf_combine(c("livro1.pdf", "livro2.pdf"), output = "livro.pdf")
library(DiagrammeR)
##
figura<-DiagrammeR::grViz("
digraph a_nice_graph {
# node definitions with substituted label text
node [fontname = Helvetica, color = black]
a [label = 'Fase de buscas',fontname=Impact]
b [label = 'ResearchGate:\n100']
c [label = 'UNESP:\n192']
d [label = 'Rev. ABEM:\n3']
e [label = 'Rev. Hodie (UFG):\n10']
f [label = 'BDTD:\n459']
g [label = 'Revista USP:\n2']
h [label = 'Revista Vórtex:\n2']
i [label = 'Mackenzie:\n85']
j [label = 'Periódicos\n CAPES:\n297']
k [label = 'DOAJ:\n20']
l [label = 'Grove Music Online:\n5']
p [label = 'Total: 1175']
q [label = 'Fase de seleção', fontname=Impact]
r [label = 'Excluídos pelo título:\n1161']
s [label = 'Excluídos pelo resumo:\n6']
t [label = 'Excluídos pelo artigo:\n2']
u [label = 'Total após a seleção:\n6]
# edge definitions with the node IDs
a -> {b c d e f g h i j k l}
{b c d e f g h i j k l} -> p
p -> q
q -> {r s t}
{r s t} -> u
}
")
figura
##
figura<-DiagrammeR::grViz("
digraph a_nice_graph {
# node definitions with substituted label text
node [fontname = Helvetica, color = black]
a [label = 'Fase de buscas',fontname=Impact]
b [label = 'ResearchGate:\n100']
c [label = 'UNESP:\n192']
d [label = 'Rev. ABEM:\n3']
e [label = 'Rev. Hodie (UFG):\n10']
f [label = 'BDTD:\n459']
g [label = 'Revista USP:\n2']
h [label = 'Revista Vórtex:\n2']
i [label = 'Mackenzie:\n85']
j [label = 'Periódicos\n CAPES:\n297']
k [label = 'DOAJ:\n20']
l [label = 'Grove Music Online:\n5']
p [label = 'Total: 1175']
q [label = 'Fase de seleção', fontname=Impact]
r [label = 'Excluídos pelo título:\n1161']
s [label = 'Excluídos pelo resumo:\n6']
t [label = 'Excluídos pelo artigo:\n2']
u [label = 'Total após a seleção:\n6']
# edge definitions with the node IDs
a -> {b c d e f g h i j k l}
{b c d e f g h i j k l} -> p
p -> q
q -> {r s t}
{r s t} -> u
}
")
figura
library(rsvg)
library(DiagrammeRsvg)
figura = DiagrammeRsvg::export_svg(figura)
figura = charToRaw(figura) # flatten
rsvg_png(figura, file = "figura.png", width = 4961, height = 7016)
figura = DiagrammeRsvg::export_svg(figura)
figura = charToRaw(figura) # flatten
rsvg_png(figura, file = "figura1.png", width = 7016, height =  4961)
figura = DiagrammeRsvg::export_svg(figura)
##
figura<-DiagrammeR::grViz("
digraph a_nice_graph {
# node definitions with substituted label text
node [fontname = Helvetica, color = black]
a [label = 'Fase de buscas',fontname=Impact]
b [label = 'ResearchGate:\n100']
c [label = 'UNESP:\n192']
d [label = 'Rev. ABEM:\n3']
e [label = 'Rev. Hodie (UFG):\n10']
f [label = 'BDTD:\n459']
g [label = 'Revista USP:\n2']
h [label = 'Revista Vórtex:\n2']
i [label = 'Mackenzie:\n85']
j [label = 'Periódicos\n CAPES:\n297']
k [label = 'DOAJ:\n20']
l [label = 'Grove Music Online:\n5']
p [label = 'Total: 1175']
q [label = 'Fase de seleção', fontname=Impact]
r [label = 'Excluídos pelo título:\n1161']
s [label = 'Excluídos pelo resumo:\n6']
t [label = 'Excluídos pelo artigo:\n2']
u [label = 'Total após a seleção:\n6']
# edge definitions with the node IDs
a -> {b c d e f g h i j k l}
{b c d e f g h i j k l} -> p
p -> q
q -> {r s t}
{r s t} -> u
}
")
figura = DiagrammeRsvg::export_svg(figura)
figura = charToRaw(figura) # flatten
rsvg_png(figura, file = "figura1.png", width = 7016, height =  4961)
setwd("C:/Users/Ricardo/OneDrive - ufpr.br/R_livro/livro_introducao_R")
library(tidyverse) # data wrangling
library(ISLR)      # get "Wage" dataset
d<-(Wage)
head(d)
install.packages("effects")
library(effects) # visualização
m <- lm(wage ~ jobclass, d)
m
summary(m)
plot(allEffects(m))
m <- lm(wage ~ age, d)
summary(m)
plot(allEffects(m), grid = TRUE)
# 3. Multiple linear model with several categorical predictors
m <- lm(salary ~ jobclass + education, d)
# 3. Multiple linear model with several categorical predictors
m <- lm(wage ~ jobclass + education, d)
summary(m)
plot(allEffects(m))
plot(predictorEffect(predictor = "education", mod = m))
m <- lm(wage ~ age + year, d)
summary(m)
plot(allEffects(m))
plot(allEffects(m), confint=list(style="bars"))
library(sjPlot)    # for model visualization
m <- lm(wage ~ jobclass, d)
plot_model(m)
m <- lm(wage ~ age, d)
plot_model(m)
# 3. Multiple linear model with several categorical predictors
m <- lm(wage ~ jobclass + education, d)
plot_model(m)
m <- lm(wage ~ age + year, d)
plot_model(m)
m <- lm(wage ~ age + education, d)
plot(allEffects(m))
plot(allEffects(m), rows = 2, cols = 1)
plot_model(m, show.values = TRUE)
library(performance)    # model assumptions & performance
check_model(m)
check_model(m)
m <- lm(wage ~ education * jobclass, d)
# not too neat representation!
plot(allEffects(m))
# better representation
plot(allEffects(m), lines = list(multiline = TRUE))
# perfect representation
plot(
allEffects(m),
lines = list(multiline = T),
confint = list(style = "auto"))
plot_model(m, type = "int")+theme_blank()+theme(legend.position = "top")
library(emmeans)      # for post-hocs
emmeans(m, pairwise ~ jobclass | education, adjust = "fdr")$contrasts
m <- lm(wage ~ age * health, d)
plot(
allEffects(m),
lines = list(multiline = T),
confint = list(style = "auto"))
plot_model(m, type = "int")+
theme_minimal()+
theme(legend.position = "top")
check_model(m)
ggplot(d, aes(age, wage))+
geom_point()+
geom_smooth()+    # the quickest way to model numeric data
facet_grid(education~jobclass, scales = "free") # quick multiple model
m <- lm(log(wage) ~ poly(age, 2) * health, d)
plot(
allEffects(m),
lines = list(multiline = T),
confint = list(style = "auto"))
plot_model(m, show.values = T)+
theme_bw()
check_model(m)
install.packages("gam")
library(gam)
gam1 <- gam::gam(wage~s(year, df = 4)+s(age, df = 5)+education + jobclass, data=d)
par(mfrow = c(2, 2) )
plot.Gam(gam1 , se=TRUE, col= "blue")
par(mfrow = c(1, 1) )
m <- glm(health ~ jobclass * health_ins, d, family = binomial)
plot(allEffects(m))
plot_model(m, type = "int")
emmeans(m, pairwise ~ jobclass | health_ins, adjust = "fdr")$contrasts
emmeans(m, pairwise ~ health_ins | jobclass, adjust = "fdr")$contrasts
emmeans(m, pairwise ~ health_ins * jobclass, adjust = "fdr")$contrasts
pwpp(emmeans(m, ~ health_ins * jobclass), type = "response", adjust = "fdr"
)+theme_minimal()
setwd("C:/Users/Ricardo/OneDrive - ufpr.br/pós-graduação/disciplinas/Bioinformática/2023")
head(d)
library(glmulti)
formula1<-c("wage ~ year + race + education + jobclass  + health")
teste_h<-glmulti(formula1,
data   = d,
crit   = aicc,
level  = 1,
method = "h",
family = gaussian,
fitfunction = glm,
confsetsize = 10)
optimal_model_glmulti_exhaustive <- teste_h@objects[[1]]
optimal_model_glmulti_exhaustive$formula
m<-lm(wage ~ race + education + jobclass + health + year, d)
summary(m)
plot_model(m, show.values = T)+
theme_bw()
check_model(m)
library(flextable)
library(report)
flextable(report_table(m))%>%
colformat_double(digits = 4, decimal.mark = ",")%>%
style(i = c(1,4,7,13), j = 8,
pr_t = fp_text_default(
bold = T))
flextable(report_table(m))%>%
colformat_double(digits = 4, decimal.mark = ",")%>%
style(i = c(1,2,5,6,7,8,9,10,11), j = 8,
pr_t = fp_text_default(
bold = T))
setwd("C:/Users/Ricardo/OneDrive - ufpr.br/R_livro/livro_introducao_R")
bookdown::set_isbn(978-65-00-76198-6, "bookdown.yml")
library(bookdown)
