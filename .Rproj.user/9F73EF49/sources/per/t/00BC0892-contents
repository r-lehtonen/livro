# Genética

## Genética de populações


No estudo de genética de populações, alguns cálculos básicos são as frequências alélicas e genotípicas, verificar se está em equilíbrio de Hardy-Weinberg e também verificar o desequilíbrio de ligação.

Esses cálculos podem ser feitos com o pacote genetics.

Vamos carregar alguns dados de exemplo:

```{r 07-genetics}
dados<-read.table("dados/genotipagem.txt", head=T)
head(dados)
```


Vamos carregar o pacote genetics:

```{r 07-genetics 2, message=FALSE, warning=FALSE}
library(genetics)
snp<-"rs1800977"  #substituir  pelo gene/SNP de interesse
```

Agora vamos usar a função genotype, onde em sep informamos o separador de alelos nos dados.

```{r 07-genetics 3}
genotipos1<-na.omit(genotype(dados$rs1800977, sep="/")) 
genotipos1
```

Podemos ver os resultados de frequências usando summary:

```{r 07-genetics 4}
resultado1<-summary(genotipos1)
resultado1
```

Para verificar o equilíbrio de Hardy-Weinberg usamos a função HWE.chisq:

```{r 07-genetics 5}
eqhw1<-HWE.chisq(genotipos1)
eqhw1
```

Podemos salvar os resultados em um arquivo txt, onde vamos usar o objeto snp para especificar de qual SNP são os resultados:

```{r 07-genetics 6}
write("Frequencias alelicas e genotipicas.", file="res.genes.txt",append=T)
write(snp, file="res.genes.txt", append=T)
capture.output(resultado1, file="res.genes.txt",append = T)
capture.output(eqhw1, file="res.genes.txt", append = T)
```

Também podemos gerar figuras com as frequências:

```{r 07-genetics 7}
plot(genotipos1, type="allele", what="percentage")

plot(genotipos1, type="genotype", what="percentage")
```

Para salvar as figuras com as frequências, onde filename=paste(snp,"alelo.jpg", sep="": serve para criar o nome do arquivo juntando o conteúdo de snp + alelo.jpg, sem espaço, definido por sep sem nada:

```{r 07-genetics 8}
jpeg(filename=paste(snp,"alelo.jpg", sep=""))
plot(genotipos1, type="allele", what="percentage")
dev.off()

jpeg(filename=paste(snp,"genotipo.jpg", sep=""))
plot(genotipos1, type="genotype", what="percentage")
dev.off()
```


Desequilíbrio de ligação

Também podemos calcular o desequilíbrio de ligação entre 2 SNPs com a função LD, mas primeiro criamos os objetos com os dados dos SNPs com a função genotype:

```{r 07-genetics 9}
rs1800977<-na.omit(genotype(dados$rs1800977, sep="/"))
rs2230806<-na.omit(genotype(dados$rs2230806, sep="/"))
ld<-LD(rs1800977,rs2230806)
ld
```

## Genotipagem com genetics e loop  
  
  
Vamos juntar os conhecimentos de loops, que já aprendemos, para genotipar vários SNPs e criar um arquivo de saída mais elaborado:

No arquivo que estamos usando, tem uma coluna grupo (caso e controle). Usaremos essa coluna para criar 2 objetos:

```{r 07-genetics 10, message=FALSE, warning=FALSE}
library(dplyr)
caso<-filter(dados, grupo==1)   
controle<-filter(dados, grupo==2) 
```

Precisamos detalhar o que tem em resultados1:

```{r 07-genetics 11}
names(resultado1)
```

Em allele.fre e genotype.freq temos uma matriz com os resultados:

```{r 07-genetics 12}
resultado1$allele.freq
resultado1$genotype.freq
```

Com base nisso, precisamos definir quais dados queremos salvar e criar uma tabela com as variáveis. 
Aqui criamos o objeto tabela.saida, que é um data.frame e especificamos as colunas:

```{r 07-genetics 13}
tabela.saida<-data.frame(grupo=as.character(NA),SNP=as.character(NA),genot1=as.character(NA), N1=NA, F1=NA,genot2=as.character(NA), N2=NA, F2=NA,genot3=as.character(NA),N3=NA,F3=NA,alelo1=as.character(NA),N4=NA,F4=NA,alelo2=as.character(NA),N5=NA,F5=NA,hw=NA,qui_genot=NA,qui_alel=NA,stringsAsFactors = F)
```

Agora vamos criar o loop, usando for, para fazer a genotipagem e equilíbrio de HW, de cada SNP, no grupo caso e no grupo controle, depois compare por qui-quadrado as frequências alélicas e genotípica entre casos e controles.

```{r 07-genetics 14, warning=FALSE}
nomes<-colnames(dados) #nomes dos SNPs
i<-2 #número da coluna inicial para genotipar
snp<-7 # número da coluna final para genotipar
j<-1

for (i in i:snp) {
  nome_snp<-nomes[i]
  genotipos1<-na.omit(genotype(caso[,i], sep="/"))#genotipagem
  resultado1<-summary(genotipos1)#sumariza resultados
  eqhw1<-HWE.chisq(genotipos1)#equilíbrio de HW
  nome_genot<-rownames(resultado1$genotype.freq)
  nome_alelos<-rownames(resultado1$allele.freq)
  
  
  tabela.saida[j,]<-data.frame(grupo=as.character("caso"),SNP=as.character(nome_snp),genot1=as.character(nome_genot[1]), N1=resultado1$genotype.freq[1,1], F1=resultado1$genotype.freq[1,2],genot2=as.character(nome_genot[2]), N2=resultado1$genotype.freq[2,1],F2=resultado1$genotype.freq[2,2], genot3=as.character(nome_genot[3]),N3=resultado1$genotype.freq[3,1],F3=resultado1$genotype.freq[3,2],alelo1=as.character(nome_alelos[1]),N4=resultado1$allele.freq[1,1],F4=resultado1$allele.freq[1,2],alelo2=as.character(nome_alelos[2]),N5=resultado1$allele.freq[2,1],F5=resultado1$allele.freq[2,2],hw=eqhw1$p.value,qui_genot=NA,qui_alel=NA,stringsAsFactors = F)
  j<-j+1
  
  genotipos2<-na.omit(genotype(controle[,i], sep="/"))#genotipagem
  resultado2<-summary(genotipos2)#sumariza resultados
  eqhw2<-HWE.chisq(genotipos2)#equilíbrio de HW
  
  #qui-quadrado alelo
  a<-resultado1$allele.freq[1,1]
  b<-resultado1$allele.freq[2,1]
  c<-resultado2$allele.freq[1,1]
  d<-resultado2$allele.freq[2,1]
  quadrado<-rbind(c(a,c),c(b,d))
  quadrado
  res_qui<-chisq.test(quadrado,correct=F)
  
  #qui-quadrado genotipo
  g<-resultado1$genotype.freq[1,1]
  h<-resultado1$genotype.freq[2,1]
  l<-resultado1$genotype.freq[3,1]
  k<-resultado2$genotype.freq[1,1]
  m<-resultado2$genotype.freq[2,1]
  o<-resultado2$genotype.freq[3,1]
  quadrado2<-rbind(c(g,k),c(h,m),c(l,o))
  res_qui2<-chisq.test(quadrado2,correct=F)
  
  tabela.saida[j,]<-data.frame(grupo=as.character("controle"),SNP=as.character(nome_snp),genot1=as.character(nome_genot[1]), N1=resultado2$genotype.freq[1,1], F1=resultado2$genotype.freq[1,2],genot2=as.character(nome_genot[2]), N2=resultado2$genotype.freq[2,1],F2=resultado2$genotype.freq[2,2], genot3=as.character(nome_genot[3]),N3=resultado2$genotype.freq[3,1],F3=resultado2$genotype.freq[3,2],alelo1=as.character(nome_alelos[1]),N4=resultado2$allele.freq[1,1],F4=resultado2$allele.freq[1,2],alelo2=as.character(nome_alelos[2]),N5=resultado2$allele.freq[2,1],F5=resultado2$allele.freq[2,2],hw=eqhw2$p.value,qui_genot=res_qui2$p.value,qui_alel=res_qui$p.value,stringsAsFactors = F)
  
  
  
  i<-(i+1)
  j<-j+1
}
```

Verificando os resultados:

```{r 07-genetics 15}
library(flextable)
flextable(tabela.saida)
```


Para terminar vamos salvar os resultados em um arquivo xlsx:

```{r 07-genetics 16}
library(openxlsx)
write.xlsx(tabela.saida, file="genotipagem.xlsx")
```


## Heredogramas

Também podemos gerar heredogramas usando o R, para isso usamos o pacote
kinship2 e carregar o arquivo de exemplo:

```{r 07- heredogramas, message=FALSE, warning=FALSE}
library(kinship2)
familia<-read.xlsx("dados/familia.xlsx", sheet=1, colNames = T)
head(familia)
```
Nessa planilha temos uma coluna com a identificação única de de cada indivíduo (ids), duas colunas identificando os pais (dad e mom), uma coluna para o sexo, uma coluna com a informação se o indivíduo está vivo ou não (dead) e uma última coluna (caract) que indica se o indivíduo tem a característica de interesse.  

Usando a função pedigree:

```{r 07- heredogramas 2}
family <- pedigree(id=familia$ids, dadid=familia$dad, momid=familia$mom, affected=familia$caract, sex=familia$sex, status=familia$dead)
```

E plotando o heredograma:

```{r 07- heredogramas 3}
plot.pedigree(family,cex = 0.8, col = c("red","blue","green","red","blue","green","red","blue","green","black"))
```


## Análises filogenéticas

O pacote APE (Analysis of Phylogenetics and Evolution) permite fazer vários tipos de análises (http://ape-package.ird.fr/).

Podemos pegar sequências de DNA diretamente do Genbank:

```{r 07- ape}
library(ape)

id_seq<-c("NM_001081850.1","NM_000055.3","NM_009738.3")
seq_bche<-read.GenBank(id_seq)
seq_bche
```

Também é possível ler um arquivo fasta:

```{r 07- ape 2}
pon<-read.FASTA("dados/PON123.fas")
pon
```


E com a função nj podemos fazer uma árvore pelo método neighbor-joining de Saitou and Nei (1987).

```{r 07- ape 3}
pon.trw<-nj(dist.dna(pon))
plot(pon.trw)
```



